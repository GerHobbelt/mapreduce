<HEAD>
<TITLE>PHISH Package Users Manual</TITLE>
<META NAME="docnumber" CONTENT="http://www.sandia.gov/~sjplimp/phish.html">
<META NAME="author" CONTENT="Sandia National Laboratories, Copyright (2012) Sandia Corporation">
<META NAME="copyright" CONTENT="This software and manual is distributed under the modified Berkeley Software Distribution (BSD) License.">
</HEAD>

<BODY>

"PHISH WWW Site"_pws :c

:link(pws,http://www.sandia.gov/~sjplimp/phish.html)

:line

<H1></H1>

PHISH Documentation :h2,c

Version info: :h4

The PHISH "version" is the date when it was released, such as 1 Sept
2012.  PHISH is updated continuously.  Whenever we fix a bug or add a
feature, we release it immediately, and post a notice on "this page of
the WWW site"_bug.  Each dated copy of PHISH contains all the features
and bug-fixes up to and including that version date.  The version date
is printed to the screen every time you process an input script with
the bait.py tool.  It is also in the file src/version.h and in the
PHISH directory name created when you unpack a tarball.

If you browse the HTML or PDF doc pages on the PHISH WWW site, they
always describe the most current version of PHISH. :ulb,l

If you browse the HTML or PDF doc pages included in your tarball, they
describe the version you have. :ule,l





The PHISH package is simple, portable framework that allows you to
hook together a collection of independent stand-alone programs so that
they can solve a problem together by sending messages to each other.
Often this involves processing large volumes of data that arrives in a
continuous, streaming fashion or is read from a large archive of
files; hence the term "informatics" in the acronym.

The individual programs can be written in any language (e.g. C, C++,
Fortran, Python) and link to the PHISH library so that they can
receive incoming data from upstream sources, bundle their data, and
send it downstream.

A PHISH input script allows specification of the set of programs to
launch as independent procsses, how many copies of each are inovked,
and the topology of how they connect to each other as they send and
receive data.  Thus the input script encodes an algorithm for
processing continuous data from a stream source or archived data from
files.  The supported communication topologies include a "hashed" mode
of messaging where a "key" is hashed to determine what process to send
data to, which is a means of exploiting parallelism in a streaming
context, akin to a MapReduce operation.

The sending and receiving of datums between processes is handled
within the PHISH library either by calls to the message-passing
interface (MPI) library, or by sockets via the ZMQ library.  A PHISH
tool converts the input script into a configuration file that can be
launched by either MPI or a shell script.  In the former case, a PHISH
program can run on any platform that supports MPI.  In the latter
case, a PHISH program can run on a single desktop machine or across
any network of (geographically distributed) machines that support
socket connections.






The PHISH package is open-source software that implements the
"MapReduce operation"_wiki popularized by Google on top of standard
MPI message passing.

The library is designed for parallel execution on distributed-memory
platforms, but will also operate on a single processor.  It requires
no additional software to build and run, except linking with an MPI
library if you wish to perform MapReduces in parallel.  Similar to the
original Google design, a user performs a MapReduce by writing a small
program that invokes the library.  The user typically provides two
application-specific functions, a "map()" and a "reduce()", that are
called back from the library when a MapReduce operation is executed.
"Map()" and "reduce()" are serial functions, meaning they are invoked
independently on individual processors on portions of your data when
performing a MapReduce operation in parallel.

The MR-MPI library is written in C++ and is callable from hi-level
langauges such as C++, C, Fortran.  A Python wrapper is also included,
so MapReduce programs can be written in Python, including map() and
reduce() user callback methods.  A hi-level scripting interface to the
MR-MPI library, called OINK, is also included which can be used to
develop and chain MapReduce algorithms together in scripts with
commands that simplify data management tasks.  OINK has its own
"manual and doc pages"_../oinkdoc/Manual.html.

The goal of the MR-MPI library is to provide a simple and portable
interface for users to create their own MapReduce programs, which can
then be run on any desktop or large parallel machine using MPI.  See
the Background section for features and limitations of this
implementation.

The distrubution includes a few examples of simple programs that
illustrate the use of MR-MPI.




Source code for PHISH is freely available for download from the "PHISH
web site"_phish and is licensed under the modified "Berkeley Software
Distribution (BSD) License"_bsd.  This basically means they can be
used by anyone for any purpose.  See the LICENSE file provided with
the distribution for more details.

The authors of PHISH are "Steve Plimpton"_sjp and Tim Shead who can be
contacted via email: sjplimp,tshead at sandia.gov.

:link(bsd,http://en.wikipedia.org/wiki/BSD_license)
:link(sjp,http://www.cs.sandia.gov/~sjplimp)
:link(phish,http://www.cs.sandia.gov/~sjplimp/phish.html)
:link(bug,http://www.sandia.gov/~sjplimp/phish/bug.html)

:line

The PHISH documentation is organized into the following sections.  If
you find errors or omissions in this manual or have suggestions for
useful information to add, please send an email to the developers so
we can improve the PHISH documentation.

Once you are familiar with PHISH, you may want to bookmark "this
page"_Interface_c++.html at interface_c++.html, since they gives quick
access to documentation for all the PHISH library methods and minnows.

"PDF file"_Manual.pdf of the entire manual, generated by
"htmldoc"_http://www.easysw.com/htmldoc

"Introduction"_Introduction.html
"Setup via bait.py"_Setup.html
"PHISH Library"_Library.html
"PHISH Minnows"_Minnows.html
"Examples"_Examples.html
"C interface to the PHISH Library"_Library_c.html
"Python interface to the PHISH Library"_Library_python.html :ul

</BODY>
