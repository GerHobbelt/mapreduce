"MapReduce-MPI WWW Site"_mws - "MapReduce-MPI Documentation"_md :c

:link(mws,http://www.cs.sandia.gov/~sjplimp/mapreduce.html)
:link(md,Manual.html)

:line

Settings and defaults :h3

These are internal library variables that can be set by your program:

mapstyle = 0 (chunk) or 1 (stride) or 2 (master/slave)
verbosity = 0 (none) or 1 (summary) or 2 (histogrammed)
timer = 0 (none) or 1 (summary) or 2 (histogrammed)
memsize = N = number of Mbytes of memory
keyalign = N = byte-alignment of keys
valuealign = N = byte-alignment of values
fpath = string :pre

All the settings except {fpath} are set in the following manner from
C++:

MapReduce *mr = new MapReduce(MPI_COMM_WORLD);
mr->verbosity = 1; :pre

Because {fpath} takes a string argument, it is set with
the following function:

mr->set_fpath(char *string); :pre

See the "C interface"_interface_c.html and "Python
interface"_interface_python.html doc pages for how to set the various
settings from C and Python.

As documented below, some of these settings can be changed at any
time.  Others only have effect if they are changed before the
MapReduce object begins to operate on KeyValue and KeyMultiValue
objects.

:line

The {mapstyle} setting determines how the N map tasks are assigned to
the P processors by the "map()"_map.html method.

A value of 0 means split the tasks into "chunks" so that processor 0
is given tasks from 0 to N/P, proc 1 is given tasks from N/P to 2N/P,
etc.  Proc P-1 is given tasks from N - N/P to N.

A value of 1 means "strided" assignment, so proc 0 is given tasks
0,P,2P,etc and proc 1 is given tasks 1,P+1,2P+1,etc and so forth.

A value of 2 uses a "master/slave" paradigm for assigning tasks.  Proc
0 becomes the "master"; the remaining processors are "slaves".  Each
is given an initial task by the master and reports back when it is
finished.  It is then assigned the next available task which continues
until all tasks are completed.  This is a good choice if the CPU time
required by various mapping tasks varies greatly, since it will tend
to load-balance the work across processors.  Note however that proc 0
performs no mapping tasks.

This setting can be changed at any time.

The default value for {mapstyle} is 0.

:line

The {verbosity} setting determines how much diagnostic output each
library call prints to the screen.  A value of 0 means "none".  A
value of 1 means a "summary" of the results across all processors is
printed, typically a count of total key/value pairs and the memory
required to store them.  A value of 2 prints the summary results and
also a "histogram" of these quantities by processor, so that you can
detect memory usage imbalance.

This setting can be changed at any time.

The default value for {verbosity} is 0.

:line

The {timer} setting prints out timing information for each call to the
library.  A value of 0 means "none".  A value of 1 invokes an
MPI_Barrier() at the beginning and end of the operation and prints the
elapsed time, which will be the same on all processors.  A value of 2
invokes no MPI_Barrier() calls and prints a one-line summary of timing
results across all processors and also a "histogram" of the time on
each processor, so that you can detect computational imbalance.

This setting can be changed at any time.

The default value for {timer} is 0.

:line

The {memsize} setting determines how much memory (in Mbytes) is used
by the MapReduce object to perform its various operations.  It is a
per-processor setting.  The minimium setting is 1 Mbytes; the maximum
as 4096 = 4 Gbytes.  If the data owned by a processor exceeds this
limit, then it writes its portion of the data to a file and reads it
back in for subsequent operations.  These intermediate files are
created on a per-processor basis and are deleted when the MapReduce
object is deleted, e.g. at the end of the user program.

The specificed chunk of memory is split into 4 pieces so that one or
more copies of KeyValue and KeyMultiValue objects can exist at the
same time as various operations are performed.  Thus if the default
setting of 100 Mbytes is used, a KeyValue object will be created and
written to a file in 25 Mbyte chunks, when a "map()"_map.html method
is invoked.

If you make this setting small, then processing a large data set will
induce many small reads and writes to disk.  If you make it large,
then the reads and writes will happen in large chunks, which generally
yields better I/O performance.  However, past a few MBytes in size,
there may be little gain in I/O performance.  the intermediate files
are created in the directory from which you invoke your MapReduce
program.  Depending on a parallel machine's disk system, this may mean
many processors write/read simultaneously to the same directory.

You should ensure this setting is no larger than the physical memory
available to a processor, else memory allocations may fail or occur in
slow virtual memory.  On a machine where many processors share the
same memory, e.g a multicore node, you should insure the sum of the
memory chunks for all processors does not exceed physical memory.
Note that the {memsize} setting is a rough lower bound of the memory
that will be used by various MapReduce operations.  You should
probably be conservative by a factor of 2x to insure other smaller
memory allocations do not exceed available memory.  See the "Technical
Details"_technical.html for more discussion of this topic.

This setting can only be changed before the first KeyValue or
KeyMultiValue object is created by the MapReduce object.  If changed
after that, it will have no effect.

The default value for {memsize} is 100, meaning 100 Mbytes.

:line

The {keyalign} and {valuealign} settings determine the byte alignment
of keys and values generated by the user program when they are stored
inside the library and passed back to the user program.  A setting of
N means N-byte alignment.  N must always be a power of two.

As explained in "this section"_program.html, keys and values are
variable-length strings of bytes.  The MR-MPI library knows nothing of
their contents and simply treats them as contiguous chunks of bytes.
"This section"_technical.html#align explains why it may be important
to insure proper alignment of numeric data such as integers and
floating point values.

Because keys are stored following integer lengths, keys are always at
least 4-byte aligned.  A larger alignment value can be specified if
desired.

Because they follow keys, which may be of arbitrary length (e.g. a
string), values can be 1-byte aligned.  Note that if all keys are
integers, then values will also be 4-byte aligned.  A larger alignment
value can be specified if desired.

When a multi-value is returned to the user program, e.g. by the
callback of a "reduce()"_reduce.html method, only the first value in
the multi-value is aligned to the {valuealign} setting.  Subsequent
values are packed one after the other.  If all values are the same
data-type, e.g. integers, then they will all have the same alignment.
However, if the values are mixed data types (e.g. strings and
integers), then you may need to insure each value is aligned properly
before using it in your myreduce() function.  See the "Technical
Details"_technical.html#align for more discussion of data alignment.

These settings can only be changed before the first KeyValue or
KeyMultiValue object is created by the MapReduce object.  If changed
after that, they will have no effect.

The default value for {keyalign} and {valuealign} is 4, meaning 4-byte
alignment of keys and values.

:line

The {fpath} setting determines the pathname for all internal files
created by MapReduce when it runs in out-of-core mode.  Note that it
is not a pathname for data files read by the "map()"_map.html method.
Those should be specified directly as part of the filename.

Internal out-of-core files are created as fpath/mrmpi.kmv.N.P.  "Kmv"
is for files of key/multivalue, and may be "kva" or "kvb" for
key/value pairs, or "spl" for spool files which are created by the
"collate()"_collate.html or "convert()"_convert.html or sorting
methods.  N is an internal counter which the MR-MPI library keeps
track of.  P is the processor ID.

Setting {fpath} may be useful for specifying a disk local to each
processor, or for a parallel file system that each processor can
access.

This setting can only be changed before the first KeyValue or
KeyMultiValue object is created by the MapReduce object.  If changed
after that, it will have no effect.

The default value for {fpath} is ".", which means the current working
directory.

:line
