SRC = 		mrvector.cpp mrmatrix.cpp 
OBJS = 		$(SRC:.cpp=.o)
INCS =          mrvector.h mrmatrix.h mrall.h

# Targets

all:	matvec pagerank gs ccd ccnd link2graph tri

# Connected Components without distances; two versions of the 
# algorithm (original Cohen + more scalable Plimpton) can be run 
# with this executable.
ccnd:   random_mars.o test_ccnd.o test_cc_common.o ccnd.o $(LIB)
	$(LINK) $(LINKFLAGS) test_ccnd.o test_cc_common.o \
                ccnd.o random_mars.o \
		$(USRLIB) $(SYSLIB) -o ccnd

# Original Connect Components algorith by Cohen; includes distance
# calculation from root of each component.
ccd:    random_mars.o test_cc.o test_cc_common.o $(LIB)
	$(LINK) $(LINKFLAGS) test_cc.o test_cc_common.o random_mars.o \
		$(USRLIB) $(SYSLIB) -o ccd 

# Attempt to do global sums via MapReduce.
gs:	test_gs.o mrglobalsum.o $(LIB)
	$(LINK) $(LINKFLAGS) test_gs.o mrglobalsum.o \
		$(USRLIB) $(SYSLIB) -o gs

# MapReduce implementation of Google's pagerank.
pagerank:	test_pagerank.o $(OBJS) $(LIB) $(INCS)
	$(LINK) $(LINKFLAGS) test_pagerank.o $(OBJS) \
		$(USRLIB) $(SYSLIB) -o pagerank

# MapReduce implementation of matrix-vector multiplication.
matvec:	test_matvec.o $(OBJS) $(LIB)
	$(LINK) $(LINKFLAGS) test_matvec.o $(OBJS) \
		$(USRLIB) $(SYSLIB) -o matvec

# Program to convert data to MapReduce graph and/or MatrixMarket file.
link2graph:	link2graph.o $(LIB)
		$(LINK) $(LINKFLAGS) link2graph.o \
			$(USRLIB) $(SYSLIB) -o link2graph

# Program to count triangles in a graph.
tri:	tri.o $(LIB)
	$(LINK) $(LINKFLAGS) tri.o $(USRLIB) $(SYSLIB) -o tri

tri_new:	tri_new.o $(LIB)
	$(LINK) $(LINKFLAGS) tri_new.o $(USRLIB) $(SYSLIB) -o tri_new

clean:
	rm *.o
	rm matvec pagerank gs ccd ccnd link2graph tri

# Rules

%.o:%.cpp
	$(CC) $(CCFLAGS) -c $<

%.o:%.c
	$(CC) $(CCFLAGS) -c $<
