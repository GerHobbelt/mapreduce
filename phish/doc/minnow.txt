This is list of minnows (apps) provided with PHISH

each app has main and its own functions

main:
  phish_init()
  phish_callback() as needed
  process app args
  phish_loop()
  phish_close()

** count

count instances of keyed datums

syntax: no args

creates an internal hash, so it can count instances of keys
hash key = string, hash value = count
keeps track of largest key it receives

datum method:
  treat buf of nbytes as a string and hash it
  increment hash value for that string

done method:
  iterate over hash table
  send all its entries downstream as "count string"
  send DONE message to notify receivers

** file2words

read file and emit words

syntax: no args

datum method:
  treat message as filename
  open it, parse into words separated by whitespace
  send each word, both as message and as a key

done method:
  send DONE message to notify receivers

** filegen

emit filenames

syntax: filengen file1 file2 ...

send file names one by one to receivers
then send DONE message to notify receivers

no datum method
no done method

** ping

reflect messages to a receiver

syntax: ping N M
N = # of times to ping/pong with partner proc
M = # of bytes in a message

fill M-byte buffer with NULLs
send it and go into loop

datum method:
  when recv from partner
  increment count and send back to partner
  when count hits M, send DONE message to notify receivers

no done method

** pong

reflect messages to a sender

syntax: no args

datum method:
  when recv from partner, send message back to partner

done method:
  send DONE message to notify receivers

** print

print datums to screen or file

syntax: print -f filename
-f is optional, if not specified, prints to stdout

datum method:
  print string

done method:
  close file

** slowdown

read datum and emit it with slowdown delay

syntax: slowdown delta
delta = time to delay (in seconds)

read each datum and insure delay seconds have passed
before writing it downstream

datum method:
  query time since last datum was processed and invoke usleep() if needed
  send datum downstream

done method:
  send DONE message to notify receivers

** sort

sort datums, emit highest count ones

syntax: sort N
N = keep top N of sorted list

datum method:
  assume message is "int string"
  store (int,string) as pair in a vector list

done method:
  sort the list based on integer count
  send the top N list items downstream as "count string"
  send DONE message to notify receivers

** wrapsink

wrap a child process which consumes datums by reading from stdin

syntax: wrapsink "program"
"program" can be any string with flags, redirection, etc
enclose in quotes to prevent shell from processing it

write datums to child, one by one, as lines of input
write done via popen pipe

datum method:
  write datum to pipe with appended newline

done method:
  close the pipe

** wrapsource

wrap a child process which creates datums by writing to stdout

syntax: wrapsource -f "program"
-f is optional

if -f is specified, receive filenames in stream and
  invoke child process on each filename
  generate "program" via sprintf() using filename as arg
  so "program" presumable has %s in it
if -f is not specified, invoke child process just once using "program"

"program" can be any string with flags, redirection, etc
enclose in quotes to prevent shell from processing it

read lines of output from child one by one as datums via a pipe
send them downstream via phish_send()

datum method:
  launch the child process on the filename
  read all its output until child exits
  send each line of output downstream vis phish_send w/out newline

done method:
  send DONE message to notify receivers
  
** wrapss

wrap a child process which consumes and creates datums via stdin/stdout

syntax: wrapss "program"
"program" can be any string with flags, redirection, etc
enclose in quotes to prevent shell from processing it

open 2 pipes to child via pipe()
fork() into parent and child processes
parent calls phish_probe() to query incoming messages and child output
child hooks its stdin/stdout to 2 pipes via dup2()
child invokes the "program" via execv()

datum method:
  write datum to pipe with appended newline

probe method:
  poll pipe for output from child
  if output is there, read it and break into lines
  phish_send() each line downstream as string w/out newline

close method:
  close write pipe to child so it will know parent is done
  wait for all output from child read pipe
  send DONE message to notify receivers

* Standalone Apps that can be wrapped as child proceses

** echo

echo lines from stdin to stdout

** reverse

reverse characters in lines from stdin and write to stdout

