# triangle finding

variable order equal 10
variable nz equal 4
variable nrows equal 2^v_order
variable n equal v_nrows*v_nz

mr = mrmpi()
#mr.memsize(1)
mr.verbosity(1)
mr.timer(1)

rmat(mr,$n,${nrows},0.25,0.25,0.25,0.25,0.0,12345)

# eliminate duplicate edges, both I,J and J,I exist
# results in ((Vi,Vj),NULL) with all Vi < Vj

id = map.invert_drop()
mr.map_mr(mr,id)
mr.collate()
cull = reduce.cull()
mr.reduce(cull)
variable nnew equal mr(nkv)
print "${nnew} edges after duplicates removed"

# make copy of graph for use in triangle finding

mrc = mr.copy()

# augment edges with degree of each vertex
# results in (Eij,(Di,Dj))

ev = map.edge_vert2()
fd = reduce.first_degree()
sd = reduce.second_degree()

mrc.map_mr(mrc,ev)
mrc.collate()
mrc.reduce(fd)
mrc.collate()
mrc.reduce(sd)

# find triangles in degree-augmented graph and write to output file
# once create angles, add in edges from original graph
# this enables finding completed triangles in emit_triangles()
# results in ((Vi,Vj,Vk),NULL)

ld = map.low_degree()
nsq = reduce.nsq_angles()
et = reduce.emit_triangles()

mrc.map_mr(mrc,ld)
mrc.collate()
mrc.reduce(nsq)
mrc.add(mr)
mrc.collate()
mrc.reduce(et)
variable ntri equal mrc(nkv)
print "${ntri} triangles"

pt = map.print_triangle(tmp.tri)
mrc.map_mr(mrc,pt)

pm = map.print_matrix(tmp.rmat)
mr.map_mr(mr,pm)

mr.delete()
mrc.delete()
